/**
 * @fileoverview gRPC-Web generated client stub for stakeStream
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// protoc-gen-grpc-web v1.4.2
// protoc              v3.19.4
// source: p7stream.proto

/* eslint-disable */
// @ts-nocheck

const grpc = {};
grpc.web = require('grpc-web');

var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
const proto = {};
proto.stakeStream = require('./p7stream_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.stakeStream.StakeNotificationClient = function (hostname, credentials, options) {
    if (!options) options = {};
    options.format = 'text';

    /**
     * @private @const {!grpc.web.GrpcWebClientBase} The client
     */
    this.client_ = new grpc.web.GrpcWebClientBase(options);

    /**
     * @private @const {string} The hostname
     */
    this.hostname_ = hostname.replace(/\/+$/, '');
};

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.stakeStream.StakeNotificationPromiseClient = function (hostname, credentials, options) {
    if (!options) options = {};
    options.format = 'text';

    /**
     * @private @const {!grpc.web.GrpcWebClientBase} The client
     */
    this.client_ = new grpc.web.GrpcWebClientBase(options);

    /**
     * @private @const {string} The hostname
     */
    this.hostname_ = hostname.replace(/\/+$/, '');
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.stakeStream.StakeUpdateRequest,
 *   !proto.stakeStream.StakeUpdateResponse>}
 */
const methodDescriptor_StakeNotification_StakeUpdate = new grpc.web.MethodDescriptor(
    '/stakeStream.StakeNotification/StakeUpdate',
    grpc.web.MethodType.UNARY,
    proto.stakeStream.StakeUpdateRequest,
    proto.stakeStream.StakeUpdateResponse,
    /**
     * @param {!proto.stakeStream.StakeUpdateRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
        return request.serializeBinary();
    },
    proto.stakeStream.StakeUpdateResponse.deserializeBinary
);

/**
 * @param {!proto.stakeStream.StakeUpdateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.stakeStream.StakeUpdateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.stakeStream.StakeUpdateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.stakeStream.StakeNotificationClient.prototype.stakeUpdate = function (request, metadata, callback) {
    return this.client_.rpcCall(this.hostname_ + '/stakeStream.StakeNotification/StakeUpdate', request, metadata || {}, methodDescriptor_StakeNotification_StakeUpdate, callback);
};

/**
 * @param {!proto.stakeStream.StakeUpdateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.stakeStream.StakeUpdateResponse>}
 *     Promise that resolves to the response
 */
proto.stakeStream.StakeNotificationPromiseClient.prototype.stakeUpdate = function (request, metadata) {
    return this.client_.unaryCall(this.hostname_ + '/stakeStream.StakeNotification/StakeUpdate', request, metadata || {}, methodDescriptor_StakeNotification_StakeUpdate);
};

module.exports = proto.stakeStream;
